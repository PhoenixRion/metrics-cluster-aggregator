#!/bin/sh
#
# cluster-aggregator cluster level metrics aggregation
#
# chkconfig: - 60 40
# description: cluster-aggregator is an aggregation daemon that computes \
#   cluster-level metrics from disparate hosts and services 
# processname: cluster-aggregator
# config: /opt/cluster-aggregator/config/config.json
# pidfile: /var/run/cluster-aggregator/cluster-aggregator.pid

# Source function library.
. /etc/rc.d/init.d/functions

user="cagg"
prog="cluster-aggregator"
dir="/opt/cluster-aggregator"
log_dir="$dir/logs"
exec="/opt/cluster-aggregator/bin/cluster-aggregator"
pid_file="/var/run/cluster-aggregator/cluster-aggregator.pid"
export CONFIG_FILE="/opt/cluster-aggregator/config/config.conf"
export JAVA_HOME="$(dirname $(dirname $(readlink -f $(which java))))"
export JVM_XMS="64m"
export JVM_XMX="1024m"
export LOGBACK_CONFIG="-Dlogback.configurationFile=/opt/cluster-aggregator/config/logback.xml"
export ADDITIONAL_JAVA_OPTS=""
export APP_PARAMS="${CONFIG_FILE}"
export ADDITIONAL_APP_PARAMS=""

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

if [ -z "${JAVA_OPTS}" ]; then
    export JAVA_OPTS="${LOGBACK_CONFIG}\
        -XX:+HeapDumpOnOutOfMemoryError \
        -XX:HeapDumpPath=/opt/cluster-aggregator/logs/cluster-aggregator.oom.hprof \
        -XX:+PrintGCDetails \
        -XX:+PrintGCDateStamps \
        -Xloggc:logs/cluster-aggregator.gc.log \
        -XX:NumberOfGCLogFiles=2 \
        -XX:GCLogFileSize=50M \
        -XX:+UseGCLogFileRotation \
        -Xms${JVM_XMS} \
        -Xmx${JVM_XMX} \
        -XX:+UseStringDeduplication \
        -XX:+UseG1GC \
        -Duser.timezone=UTC \
        ${ADDITIONAL_JAVA_OPTS}"
fi

lockfile=/var/lock/subsys/$prog

get_pid() {
    if [ -f "$pid_file" ]; then
        cat "$pid_file" 2> /dev/null
    fi
    echo ""
}

is_running() {
    [ ! -f "$pid_file" ] && return 1
    kill -0 `get_pid` &> /dev/null && return 0 || return 1
}

start() {
    [ -f ${CONFIG_FILE} ] || exit 6
    echo -n $"Starting $prog: "
    if is_running; then
        warning "$prog: already running"
    else
        cd "$dir"
        su "$user" -s /bin/sh -c "$exec ${APP_PARAMS} ${ADDITIONAL_APP_PARAMS} >> $log_dir/system.out 2>&1 & echo \$! > $pid_file"
        if ! is_running; then
            failure "$prog did not start"
            retval=1
        else
            success
            retval=0
        fi
    fi
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    if is_running; then
        kill `get_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi

            echo -n "."
            sleep 1
        done
        if is_running; then
            warning
            echo
            echo -n "Killing $prog: "
            kill -9 `get_pid`
            for i in {1..10}
            do
                if ! is_running; then
                    break
                fi

                echo -n "."
                sleep 1
            done
        fi

        if is_running; then
            failure
            echo
            retval=1
        else
            success
            echo
            if [ -f "$pid_file" ]; then
                rm "$pid_file"
            fi
            retval=0
        fi
    else
        warning
        echo
        echo "${prog}: not running"
        if [ -f "$pid_file" ]; then
            rm "$pid_file"
        fi
        retval=0
    fi
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    is_running
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
